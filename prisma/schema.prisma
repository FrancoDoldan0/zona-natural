generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // En runtime (Edge) usás Accelerate con prisma://
  url       = env("DATABASE_URL")
  // Para comandos de CLI (db pull/migrate) usá la directa postgresql://
  directUrl = env("DIRECT_URL")
}

model AdminUser {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  subcats   Subcategory[]
  products  Product[]
  offers    Offer[]       @relation("CategoryOffers")
  // Relación inversa opcional para banners (no cambia la DB)
  banners   Banner[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  slug       String    @unique
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  slug          String         @unique
  description   String?
  price         Float?
  sku           String?
  status        ProductStatus  @default(ACTIVE)
  categoryId    Int?
  category      Category?      @relation(fields: [categoryId], references: [id])
  subcategoryId Int?
  subcategory   Subcategory?   @relation(fields: [subcategoryId], references: [id])
  images        ProductImage[]
  productTags   ProductTag[]
  offers        Offer[]        @relation("ProductOffers")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Legacy (si ya existía en tu DB)
  url        String?     // ← opcional para poder copiar a `key`

  // Clave del objeto en R2 (p.ej. "products/1/1757875-xxxx.jpg")
  key        String?     // ← primero opcional; luego la volvemos obligatoria

  alt        String?
  isCover    Boolean  @default(false)
  sortOrder  Int      @default(0) @map("order")

  // Metadatos opcionales
  size       Int?
  width      Int?
  height     Int?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, sortOrder])
  // Cuando `key` sea obligatoria, si querés:
  // @@unique([key])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  productTags ProductTag[]
  offers      Offer[]      @relation("TagOffers")
}

model ProductTag {
  productId Int
  tagId     Int

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([productId, tagId])
}

enum DiscountType {
  PERCENT
  AMOUNT
}

model Banner {
  id         Int              @id @default(autoincrement())
  title      String

  // Legacy URL (previa a almacenar en R2). Se mantiene por compatibilidad.
  imageUrl   String

  // Clave de objeto en R2 (p.ej. "banners/uuid.jpg") para publicR2Url(imageKey)
  imageKey   String?

  // Campos renombrados lógicos mapeando columnas existentes
  linkUrl    String?          @map("link")
  isActive   Boolean          @default(true) @map("active")

  // Ubicación destinada del banner
  placement  BannerPlacement  @default(HOME)

  // Si placement === CATEGORY, se puede asociar a una categoría
  categoryId Int?
  category   Category?        @relation(fields: [categoryId], references: [id])

  // Ventana de vigencia (si se setean, se filtra por now ∈ [startAt, endAt])
  startAt    DateTime?
  endAt      DateTime?

  sortOrder  Int              @default(0) @map("order")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([placement, isActive, categoryId, startAt, endAt])
  @@index([sortOrder])
}

model Offer {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  discountType DiscountType
  discountVal  Float
  startAt      DateTime?
  endAt        DateTime?
  productId    Int?
  categoryId   Int?
  tagId        Int?

  product  Product?  @relation("ProductOffers", fields: [productId], references: [id])
  category Category? @relation("CategoryOffers", fields: [categoryId], references: [id])
  tag      Tag?      @relation("TagOffers", fields: [tagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([categoryId])
  @@index([tagId])
  @@index([startAt])
  @@index([endAt])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  entity    String
  entityId  String?
  userId    String?
  ip        String?
  userAgent String?
  details   String?
  createdAt DateTime @default(now())
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
  AGOTADO
}

enum BannerPlacement {
  HOME
  PRODUCTS
  CATEGORY
  CHECKOUT
}
